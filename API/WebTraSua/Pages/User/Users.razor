@page "/user"
@using System.Text
@inject IJSRuntime jsRuntime
@inject HttpClient HttpClient
@inject NavigationManager NV

<main class="container mt-96">
    <div class="row">
        @if (IsLoggedIn)
        {
            <div class="col-md-8">
                <div class="mb-72">
                    <p class="fs-52 fw-bold">Thông tin của bạn</p>
                    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="col-md-10 mx-auto">
                            <div class="form-group">
                                <label class="fw-semibold">Tên người dùng</label>
                                <InputText class="form-control" @bind-Value="user.Name" />
                                <ValidationMessage For="@(() => user.Name)" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Tên đăng nhập</label>
                                <InputText class="form-control" @bind-Value="user.UserName" />
                                <ValidationMessage For="@(() => user.UserName)" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Mật khẩu</label>
                                <InputText class="form-control" @bind-Value="user.PassWord" />
                                <ValidationMessage For="@(() => user.PassWord)" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Email</label>
                                <InputText class="form-control" @bind-Value="user.Email" />
                                <ValidationMessage For="@(() => user.Email)" />
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <label class="fw-semibold">Gender</label>
                                    <InputSelect class="form-select" @bind-Value="user.Gender">
                                        <option value="0">Nam</option>
                                        <option value="1">Nữ</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => user.Gender)" />
                                </div>
                                <div class="col-md-6">
                                    <label class="fw-semibold">Phone</label>
                                    <InputText class="form-control" @bind-Value="user.Phone" />
                                    <ValidationMessage For="@(() => user.Phone)" />
                                </div>
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Address</label>
                                <InputTextArea class="form-control" @bind-Value="user.Address" />
                                <ValidationMessage For="@(() => user.Address)" />
                            </div>

                            <button type="submit" class="btn btn-primary text-white button-brown-hover fs-16 fw-bold bg-B88E2F rounded-0 mt-3">
                                Lưu thay đổi
                            </button>
                        </div>
                    </EditForm>
                    <p class="text-success p-2 ms-auto">@FormSubmitMessage</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="col-md-10 mx-auto" style="margin-top: 92px;">
                    <img src="https://i.pinimg.com/originals/cf/ba/b9/cfbab918bff4c8f23ab2cf2948233238.jpg"
                         alt="" class="img-fluid w-100 h-100 rounded-circle">
                    <p class="text-center mt-3 fs-16 fw-semibold">@user.Name</p>
                </div>
            </div>

        }
        else
        {
            <p>Bạn đã cập nhật thông tin thành công , hãy quay lại trang thông tin để kiểm tra</p>
        }
    </div>

</main>


@code {
    private bool IsLoggedIn = false;
    private int UserId = 0;
    private User user = new User();
    public string FormSubmitMessage { get; set; } = string.Empty;

    string url = "http://localhost:20714/api/Users";

    protected async override Task OnInitializedAsync()
    {
        await GetSession();
        if (IsLoggedIn)
        {
            await GetUserData();
        }
        else
        {
            NV.NavigateTo("/login", true);
        }
    }

    private async Task GetUserData()
    {
        using (var response = await HttpClient.GetAsync($"{url}/{UserId}"))
        {
            if (response.IsSuccessStatusCode)
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                user = JsonConvert.DeserializeObject<User>(apiResponse);
            }
            else
            {
                Console.WriteLine("Error retrieving user data from API: " + response.StatusCode);
            }
        }
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<User>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                UserId = userInfo.UserId;
                Console.WriteLine("Session UserId: " + UserId);
            }
            else
            {
                Console.WriteLine("Unable to deserialize session information.");
            }
        }
        else
        {
            Console.WriteLine("No user session found.");
        }
    }


    private async Task HandleValidSubmit()
    {
        var jsonContent = new StringContent(JsonConvert.SerializeObject(user), Encoding.UTF8, "application/json");
        using (var response = await HttpClient.PutAsync($"{url}/{user.UserId}", jsonContent))
        {
            if (response.IsSuccessStatusCode)
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                user = JsonConvert.DeserializeObject<User>(apiResponse);
                await jsRuntime.InvokeVoidAsync("localStorage.setItem", "userSession", JsonConvert.SerializeObject(user));
                FormSubmitMessage = "Cập nhật thông tin thành công!";
            }
            else
            {
                FormSubmitMessage = "Cập nhật thất bại: " + await response.Content.ReadAsStringAsync();
            }
        }
        StateHasChanged();
        await ClearFormSubmitMessage();
    }

    private void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";
    private async Task ClearFormSubmitMessage()
    {
        await Task.Delay(5000); // Đợi 5 giây
        FormSubmitMessage = string.Empty;
        StateHasChanged();
    }
}