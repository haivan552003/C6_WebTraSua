@page "/user"
@using System.Text
@inject IJSRuntime jsRuntime
@inject HttpClient HttpClient
@inject NavigationManager NV

<style>
    .container {
        max-width: 1200px;
        margin: auto;
        padding: 20px;
    }

    .row {
        margin: 0;
    }

    .fs-52 {
        font-size: 2.25rem;
    }

    .fw-bold {
        font-weight: 700;
    }

    .mb-72 {
        margin-bottom: 72px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .fw-semibold {
        font-weight: 600;
        color: #333;
    }

    .form-control, .form-select {
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        padding: 10px;
        font-size: 1rem;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .form-control:hover, .form-select:hover {
            border-color: #007bff;
            box-shadow: 0 4px 8px rgba(38, 143, 255, 0.2);
        }

        .form-control:focus, .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
            outline: none;
        }

    .btn {
        display: inline-block;
        padding: 12px 24px;
        font-size: 1rem;
        border-radius: 8px;
        cursor: pointer;
        text-decoration: none;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    

    .text-success {
        color: #28a745;
    }

    .p-2 {
        padding: 0.5rem;
    }

    .ms-auto {
        margin-left: auto;
    }

    .rounded-0 {
        border-radius: 0;
    }

    .mt-96 {
        margin-top: 96px;
    }

    .col-md-8 {
        margin: auto;
    }

    .col-md-10 {
        margin: auto;
    }

    .col-md-6 {
        padding: 0 10px;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .text-center {
        text-align: center;
    }
</style>


<main class="container mt-96">
    <div class="row">
        @if (IsLoggedIn)
        {
            <div class="col-md-8">
                <div class="mb-72">
                    <p class="fs-52 fw-bold text-center">Thông tin của bạn</p>
                    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="col-md-10 mx-auto">
                            <div class="form-group">
                                <label class="fw-semibold">Tên người dùng</label>
                                <InputText class="form-control" @bind-Value="user.Name" />
                                <ValidationMessage For="@(() => user.Name)" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Tên đăng nhập</label>
                                <InputText class="form-control" @bind-Value="user.UserName" />
                                <ValidationMessage For="@(() => user.UserName)" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Mật khẩu</label>
                                <InputText class="form-control" @bind-Value="user.PassWord" />
                                <ValidationMessage For="@(() => user.PassWord)" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Email</label>
                                <InputText class="form-control" @bind-Value="user.Email" />
                                <ValidationMessage For="@(() => user.Email)" />
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <label class="fw-semibold">Giới tính</label>
                                    <InputSelect class="form-select" @bind-Value="user.Gender">
                                        <option value="0">Nam</option>
                                        <option value="1">Nữ</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => user.Gender)" />
                                </div>
                                <div class="col-md-6">
                                    <label class="fw-semibold">Số điện thoại</label>
                                    <InputText class="form-control" @bind-Value="user.Phone" />
                                    <ValidationMessage For="@(() => user.Phone)" />
                                </div>
                            </div>
                            <div class="form-group mt-3">
                                <label class="fw-semibold">Địa chỉ</label>
                                <InputTextArea class="form-control" @bind-Value="user.Address" />
                                <ValidationMessage For="@(() => user.Address)" />
                            </div>

                            <button type="submit" class="btn btn-black ">
                                Lưu thay đổi
                            </button>
                        </div>
                    </EditForm>
                    <p class="text-success p-2 ms-auto">@FormSubmitMessage</p>
                </div>
            </div>

        }
        else
        {
            <p>Bạn đã cập nhật thông tin thành công , hãy quay lại trang thông tin để kiểm tra</p>
        }
    </div>

</main>



@code {
    private bool IsLoggedIn = false;
    private int UserId = 0;
    private User user = new User();
    public string FormSubmitMessage { get; set; } = string.Empty;

    string url = "http://localhost:20714/api/Users";

    protected async override Task OnInitializedAsync()
    {
        await GetSession();
        if (IsLoggedIn)
        {
            await GetUserData();
        }
        else
        {
            NV.NavigateTo("/login", true);
        }
    }

    private async Task GetUserData()
    {
        using (var response = await HttpClient.GetAsync($"{url}/{UserId}"))
        {
            if (response.IsSuccessStatusCode)
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                user = JsonConvert.DeserializeObject<User>(apiResponse);
            }
            else
            {
                Console.WriteLine("Error retrieving user data from API: " + response.StatusCode);
            }
        }
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<User>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                UserId = userInfo.UserId;
                Console.WriteLine("Session UserId: " + UserId);
            }
            else
            {
                Console.WriteLine("Unable to deserialize session information.");
            }
        }
        else
        {
            Console.WriteLine("No user session found.");
        }
    }


    private async Task HandleValidSubmit()
    {
        var jsonContent = new StringContent(JsonConvert.SerializeObject(user), Encoding.UTF8, "application/json");
        using (var response = await HttpClient.PutAsync($"{url}/{user.UserId}", jsonContent))
        {
            if (response.IsSuccessStatusCode)
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                user = JsonConvert.DeserializeObject<User>(apiResponse);
                await jsRuntime.InvokeVoidAsync("localStorage.setItem", "userSession", JsonConvert.SerializeObject(user));
                FormSubmitMessage = "Cập nhật thông tin thành công!";
            }
            else
            {
                FormSubmitMessage = "Cập nhật thất bại: " + await response.Content.ReadAsStringAsync();
            }
        }
        StateHasChanged();
        await ClearFormSubmitMessage();
    }

    private void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";
    private async Task ClearFormSubmitMessage()
    {
        await Task.Delay(5000); // Đợi 5 giây
        FormSubmitMessage = string.Empty;
        StateHasChanged();
    }
}