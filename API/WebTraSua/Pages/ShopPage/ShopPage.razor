@page "/shop/{id?}"
@inject NavigationManager nv;

<style>
    .pagination {
        justify-content: center;
        margin-top: 20px;
    }

        .pagination .page-item a.page-link {
            border: 0;
            border-radius: 7px;
            padding: 10px 20px;
            background-color: #F9F1E7;
            color: black;
        }

        .pagination .page-item {
            margin-right: 20px;
        }

    .product-container {
        position: relative;
    }

    .btn-mua-ngay {
        display: none;
        position: absolute;
        bottom: -45px;
        left: 68%;
        transform: translateX(-50%);
        width: 315px;
    }

    .product-container:hover .btn-mua-ngay {
        display: block;
    }

    .mt-5 {
        margin-top: 4rem !important;
    }
</style>

<main class="container">
    <div class="row">
        <div class="col-md-3">
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    BỘ SƯU TẬP(1)
                    <a style="float: right;color: black;" class="text-decoration-none" href="#">+</a>
                </li>
                <li class="list-group-item">
                    NGUỒN GỐC
                    <a style="float: right;color: black;" class="text-decoration-none" href="#">+</a>
                </li>
                <li class="list-group-item">
                    HƯƠNG VỊ
                    <a style="float: right;color: black;" class="text-decoration-none" href="#">+</a>
                </li>
                <li class="list-group-item">
                    CHẤT LƯỢNG
                    <a style="float: right;color: black;" class="text-decoration-none" href="#">+</a>
                </li>
                <li class="list-group-item">
                    CÀ PHÊ
                    <a style="float: right;color: black;" class="text-decoration-none" href="#">+</a>
                </li>
            </ul>
        </div>
        <div class="col-md-9">
            <div class="row">
                @foreach (var product in products)
                {
                    <div class="col-md-4 md-4 mt-5">
                        <a class="nav-link text-black fs-16 me-75" href="details/@product.ProductID">
                            <div class="product-container">
                                <img src="@(product.Image.FirstOrDefault()?.Name ?? "https://via.placeholder.com/306x301")"
                                     style="height: 301px; width: 306px;" alt="">
                                <div class="mt-3 text-center">
                                    <p style="margin-bottom: 0rem;margin-left: 77px;">@product.Name</p>
                                    <p style="margin-bottom: 0rem;margin-left: 77px;">@product.Size_Product.FirstOrDefault()?.Price VNĐ</p>
                                </div>
                                <a href="details/@product.ProductID" class="btn-mua-ngay btn btn-primary mt-4 rounded-1">
                                    MUA NGAY
                                </a>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
    <br>
</main>

@code {
    [Parameter]
    public string? id { get; set; }

    string url = "http://localhost:20714/api/Products";
    string urlImage = "http://localhost:20714/api/Images";
    string urlSizeProduct = "http://localhost:20714/api/Size_Product";
    string urlCategory = "http://localhost:20714/api/Categories";

    public IEnumerable<Product> products { get; set; } = Enumerable.Empty<Product>();
    public IEnumerable<Image> images { get; set; } = Enumerable.Empty<Image>();
    public IEnumerable<Size_Product> size_Products { get; set; } = Enumerable.Empty<Size_Product>();
    public IEnumerable<Categories> categories { get; set; } = Enumerable.Empty<Categories>();

    protected async override Task OnInitializedAsync()
    {
        await CallAPI();
    }

    async Task CallAPI()
    {
        string url;

        using (var httpClient = new HttpClient())
        {
            if (string.IsNullOrEmpty(id))
            {
                url = "http://localhost:20714/api/Products";
                using (var response = await httpClient.GetAsync(url))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    products = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
                }
            }
            else
            {
                url = $"http://localhost:20714/api/Products/Cate/{id}";
                using (var response = await httpClient.GetAsync(url))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    products = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
                }
            }
            using (var response = await httpClient.GetAsync(urlImage))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                images = JsonConvert.DeserializeObject<List<Image>>(apiResponse);
            }
            using (var response = await httpClient.GetAsync(urlSizeProduct))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                size_Products = JsonConvert.DeserializeObject<List<Size_Product>>(apiResponse);
                foreach (var product in products)
                {
                    product.Size_Product = size_Products.Where(sp => sp.ProductID == product.ProductID).ToList();
                }
            }
            using (var response = await httpClient.GetAsync(urlCategory))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                categories = JsonConvert.DeserializeObject<List<Categories>>(apiResponse);
            }

        }
    }
}
