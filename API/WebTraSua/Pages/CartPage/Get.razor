@page "/cart"
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@using Newtonsoft.Json

<h3>Giỏ Hàng</h3>

@if (cartItems.Count == 0)
{
    <p>Giỏ hàng của bạn hiện đang trống.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tên Sản Phẩm</th>
                <th>Kích Cỡ</th>
                <th>Số Lượng</th>
                <th>Giá</th>
                <th>Tổng Giá</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartItems)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.SizeName</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => DecreaseQuantity(item)">-</button>
                        @item.Quantity
                        <button class="btn btn-secondary" @onclick="() => IncreaseQuantity(item)">+</button>
                    </td>
                    <td>@item.Price VNĐ</td>
                    <td>@(item.Price * item.Quantity) VNĐ</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveFromCart(item)">Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="total">
        <p><strong>Tổng cộng:</strong> @totalPrice VNĐ</p>
        <button class="btn btn-black" @onclick="ProceedToCheckout">Thanh Toán</button>
    </div>
}

@code {
    private List<CartItem> cartItems = new List<CartItem>();
    private decimal totalPrice = 0;

    protected override async Task OnInitializedAsync()
    {
        var cartJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "cartItems");
        if (!string.IsNullOrEmpty(cartJson))
        {
            cartItems = JsonConvert.DeserializeObject<List<CartItem>>(cartJson);
            UpdateTotalPrice();
        }
    }

    private void DecreaseQuantity(CartItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            UpdateTotalPrice();
            SaveCartToSession();
        }
    }

    private void IncreaseQuantity(CartItem item)
    {
        item.Quantity++;
        UpdateTotalPrice();
        SaveCartToSession();
    }

    private void RemoveFromCart(CartItem item)
    {
        cartItems.Remove(item);
        UpdateTotalPrice();
        SaveCartToSession();
    }

    private void UpdateTotalPrice()
    {
        totalPrice = cartItems.Sum(i => i.Price * i.Quantity);
    }

    private async void SaveCartToSession()
    {
        var cartJson = JsonConvert.SerializeObject(cartItems);
        await jsRuntime.InvokeVoidAsync("sessionStorage.setItem", "cartItems", cartJson);
    }

    private async Task ProceedToCheckout()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (string.IsNullOrEmpty(userInfoJson))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
        if (userInfo == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userID = userInfo.UserID;

        // Tạo hóa đơn mới
        var newBill = new
        {
            Date = DateTime.UtcNow,
            Total = totalPrice,
            UserID = userID,
            StatusID = 1 // Trạng thái đơn hàng
        };

        // Gửi hóa đơn mới đến API Bills
        var httpClient = new HttpClient();
        var response = await httpClient.PostAsJsonAsync("http://localhost:20714/api/Bills", newBill);
        response.EnsureSuccessStatusCode();
        var bill = await response.Content.ReadFromJsonAsync<Bill>();

        // Gửi chi tiết hóa đơn cho từng sản phẩm trong giỏ hàng
        foreach (var item in cartItems)
        {
            var billDetail = new
            {
                BillID = bill.BillId,
                ProductID = item.ProductID,
                Quality = item.Quantity,
                Subtotal = item.Price * item.Quantity
            };

            await httpClient.PostAsJsonAsync("http://localhost:20714/api/BillDetails", billDetail);
        }

        // Chuyển hướng đến trang thanh toán thành công với thông tin hóa đơn
        var paymentUrl = $"/payment-success2?billID={bill.BillId}&date={Uri.EscapeDataString(bill.Date.ToString())}&total={totalPrice}";
        NavigationManager.NavigateTo(paymentUrl);

        // Xóa giỏ hàng sau khi thanh toán thành công
        cartItems.Clear();
        SaveCartToSession();
    }
}
