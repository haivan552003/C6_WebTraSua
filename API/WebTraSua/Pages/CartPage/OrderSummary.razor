@page "/order-summary"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@using System.Net.Http.Json
@using Newtonsoft.Json

<div class="order-summary">
    <h3>Đơn Hàng</h3>

    <p><strong>Tên Sản Phẩm:</strong> @productName</p>
    <p><strong>Kích Cỡ:</strong> @sizeName</p>

    <div class="quantity-control">
        <button id="decreaseBtn" @onclick="DecreaseQuantity">-</button>
        <input type="text" id="quantityInput" @bind="quantity" step="1" min="1" max="10" readonly>
        <button id="increaseBtn" @onclick="IncreaseQuantity">+</button>
    </div>

    <p><strong>Số lượng:</strong> @quantity</p>
    <p><strong>Giá:</strong> @String.Format("{0:N0} VNĐ", price)</p>
    <p><strong>Tổng Giá:</strong> @String.Format("{0:N0} VNĐ", totalPrice)</p>
    <div class="">
        <button class="btn btn-black" @onclick="ProceedToPayment">
            <i class="fa-solid fa-cart-shopping"></i> THANH TOÁN
        </button>
    </div>
   
</div>
<style>
    .order-summary {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
        font-family: Arial, sans-serif;
    }

        .order-summary h3 {
            font-size: 24px;
            color: #333;
            text-align: center;
            margin-bottom: 20px;
        }

        .order-summary p {
            font-size: 16px;
            color: #555;
            margin: 10px 0;
        }

            .order-summary p strong {
                color: #333;
            }

    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 20px 0;
    }

        .quantity-control button {
            background-color: #ddd;
            border: 1px solid #ccc;
            border-radius: 3px;
            padding: 5px 10px;
            font-size: 18px;
            color: #333;
            cursor: pointer;
            margin: 0 5px;
            width: 40px;
            height: 40px;
        }

         

        .quantity-control input {
            text-align: center;
            width: 40px;
            margin: 0 5px;
            padding: 5px 10px;
            height: 40px;
            border: 1px solid #ccc;
            border-radius: 3px;
            font-size: 18px;
            color: #333;
            margin: 0 10px;
            background-color: #fff;
            margin-top : 22px;
        }

    .order-summary button {
        background-color: #333;
        color: #fff;
        font-size: 18px;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        display: block;
        width: 100%;
        text-align: center;
        margin-top: 20px;
    }

      

</style>

@code {
    private bool IsLoggedIn = false;
    private string UserName = null;

    [Parameter]
    public string productName { get; set; }

    [Parameter]
    public string sizeName { get; set; }

    [Parameter]
    public decimal price { get; set; }

    [Parameter]
    public int quantity { get; set; }

    [Parameter]
    public int productID { get; set; }

    private decimal totalPrice => price * quantity;

    protected override void OnParametersSet()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        productName = query["productName"];
        sizeName = query["sizeName"];
        price = decimal.TryParse(query["price"], out var p) ? p : 0;
        quantity = int.TryParse(query["quantity"], out var q) ? q : 0;
        productID = int.TryParse(query["productID"], out var id) ? id : 0;
    }

    private async Task ProceedToPayment()
    {
        // Lấy thông tin người dùng từ session
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (string.IsNullOrEmpty(userInfoJson))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
        if (userInfo == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userID = userInfo.UserID; // Lấy ID người dùng từ thông tin đã giải mã

        // Tạo hóa đơn mới
        var newBill = new
        {
            Date = DateTime.UtcNow,
            Total = totalPrice,
            UserID = userID,
            StatusID = 1 // Hoặc giá trị statusID phù hợp với yêu cầu của bạn
        };

        // Gửi hóa đơn mới đến API Bills
        var httpClient = new HttpClient();
        var response = await httpClient.PostAsJsonAsync("http://localhost:20714/api/Bills", newBill);
        response.EnsureSuccessStatusCode();
        var bill = await response.Content.ReadFromJsonAsync<Bill>();

        // Tạo chi tiết hóa đơn
        var billDetail = new
        {
            BillID = bill.BillId, 
            ProductID = productID, 
            Quality = quantity,
            Subtotal = totalPrice
        };

        // Gửi chi tiết hóa đơn đến API BillDetails
        await httpClient.PostAsJsonAsync("http://localhost:20714/api/BillDetails", billDetail);

        // Chuyển hướng đến trang thanh toán thành công
        var paymentUrl = $"/payment-success?productName={Uri.EscapeDataString(productName)}&sizeName={Uri.EscapeDataString(sizeName)}&price={totalPrice}&quantity={quantity}&productID={productID}";
        NavigationManager.NavigateTo(paymentUrl);
    }

    private void DecreaseQuantity()
    {
        if (quantity > 1)
        {
            quantity--;
            StateHasChanged();
        }
    }

    private void IncreaseQuantity()
    {
        if (quantity < 10)
        {
            quantity++;
            StateHasChanged();
        }
    }

}
