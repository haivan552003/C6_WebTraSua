@page "/details/{ProductID:int}"
@inject NavigationManager nv;
@inject HttpClient httpClient;
@inject IJSRuntime jsRuntime

<style>
    .radio-button {
        display: inline-block;
        margin-right: 5px;
        cursor: pointer;
        padding: 5px 5px;
        border-radius: 5px;
        border: 1px solid #000;
        background-color: #fff;
        transition: background-color 0.3s, color 0.3s;
    }

        .radio-button:hover {
            background-color: #000;
            color: #fff
        }

        .radio-button input[type="radio"] {
            display: none;
        }

            .radio-button input[type="radio"]:checked + .radio-button-label {
                background-color: #000;
                color: white;
                border-color: #000;
            }

    .radio-button-label {
        display: block;
        text-align: center;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
    }
</style>


<div class="container">
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <div class="row">
                <div class="col-md-4">
                    <!-- product image -->
                    @if (product?.Image != null && product.Image.Any())
                    {
                        var imagesForProduct = product.Image.Where(img => img.ProductID == product.ProductID).ToList();

                        <img id="mainImage" src="@GetImagePath(imagesForProduct.First().Name)" class="img-fluid h-75 w-100 main-image" />
                        <div class="row secondary">
                            @foreach (var image in product.Image.Take(4))
                            {
                                <div class="col-md-3">
                                    <img src="@GetImagePath(@image.Name)" class="img-fluid h-100 w-100 secondary-img" onclick="changeMainImage('@image.Name')" />
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p>Loading...</p>
                    }
                </div>

                @if (product != null)
                {
                    <div class="col-md-8">
                        <h1 class="product-name">@product.Name</h1>
                        <p class="description">@product.Description1</p>
                        <div class="row">
                            <div class="col-md-3">
                                <p><i class="fa-solid fa-leaf fs-5"></i> Trà</p>
                            </div>
                            <div class="col-md-3">
                                <p><i class="fa-solid fa-mug-hot fs-5"></i> Sữa</p>
                            </div>
                            <div class="col-md-3">
                                <p><i class="fa-solid fa-cake-candles fs-5"></i> Bánh kem</p>
                            </div>
                        </div>
                        <p>Số lượng:</p>
                        <div class="quantity-control me-3">
                            <button id="decreaseBtn" @onclick="DecreaseQuantity">-</button>
                            <input type="text" id="quantityInput" @bind="selectedSizeProductQuality" step="1" min="1" max="10" readonly>
                            <button id="increaseBtn" @onclick="IncreaseQuantity">+</button>
                        </div>
                        <div class="size">
                            <p>Kích cỡ:</p>
                            @foreach (var sizeProduct in product.Size)
                            {
                                <div class="form-check radio-button">
                                    <input type="radio" class="form-check-input" id="size-@sizeProduct.SizeID" name="sizeOptions" value="@sizeProduct.SizeID" @onchange="() => UpdateSelectedSize(sizeProduct)" />
                                    <label class="radio-button-label" for="size-@sizeProduct.SizeID">
                                        @sizeProduct.Name
                                    </label>
                                </div>
                            }
                            <p>
                                Giá:
                                @if (selectedSize != null)
                                {
                                <p>@(selectedSizeProductQuality * selectedSize.Price) VNĐ</p>
                                }
                                else
                                {
                                <p>0 VNĐ</p>
                                }
                            </p>

                        </div>

                        <div class="row">
                            <div class="col-md-6 d-flex">
                                <button class="btn btn-black mt-30" style="width: 270px;" @onclick="HandleBuyNowClick">
                                    <i class="fa-solid fa-cart-shopping"></i> MUA NGAY
                                </button>
                            </div>
                            <div class="col-md-6 d-flex">
                                <button class="btn btn-black mt-30" style="width: 270px;" @onclick="HandleAddToCartClick">
                                    <i class="fa-solid fa-cart-shopping"></i> THÊM VÀO GIỎ
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
        <div class="col-md-1"></div>
    </div>
    <div class="row info-section">
        <div class="col-md-6">
            <h3>Topping thêm</h3>
            <div class="icon-text">
                <span><strong>Thạch chân mèo : 10k</strong></span>
            </div>
            <div class="icon-text">
                <span><strong>Chân châu đen : 10k</strong></span>
            </div>
            <div class="icon-text">
                <span><strong>Pudding (Matcha, Cacao, Trứng) : 10k</strong></span>
            </div>
        </div>
        <div class="col-md-6">
            <h3>Mô tả sản phẩm</h3>
            <div class="row">
                <div class="col-6">
                    <p><strong>Hương vị</strong><br>Ngọt vừa phải, đậm trà</p>
                </div>
                <div class="col-6">
                    <p><strong>Topping đi kèm</strong><br>Chân châu đen, pudding</p>
                </div>
                <div class="col-6">
                    <p><strong>Caffeine</strong><br>Không quá cao</p>
                </div>
                <div class="col-6">
                    <p><strong>Năng lượng</strong><br>100KCALO</p>
                </div>
            </div>
            <hr>
            <h3>Nguyên liệu</h3>
            <p>Trà đen Phúc Long, bột béo, bột sữa, đường,.....</p>
        </div>
    </div>
    <div class="row same-product">
        <h2>Sản phẩm tương tự</h2>
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <div class="row">
                @foreach (var similarProduct in similarProducts)
                {
                    <div class="col-md-4">
                        <div class="card card-prodcut-same mx-auto">
                            @if (similarProduct.Image != null && similarProduct.Image.Any())
                            {
                                @foreach (var image in similarProduct.Image.Take(1))
                                {
                                    <img src="@GetImagePath(image.Name)" class="card-img-top mx-auto" style="width:250px; height:250px">
                                }
                            }
                            else
                            {
                                <img src="default.jpg" class="card-img-top h-75">
                            }
                            <div class="card-body">
                                @*   <p class="card-text name">@similarProduct.Name</p>
                            @if (similarProduct?.ProductID != null && similarProduct.ProductID.Any())
                            {
                            var sizeForProduct = similarProduct.ProductID.Where(size => size.ProductID == similarProduct.ProductID).ToList();
                            if (sizeForProduct.Any())
                            {
                            var firstSize = sizeForProduct.FirstOrDefault();
                            <h6>Giá: @firstSize.Price VNĐ</h6>
                            }
                            } *@

                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-2"></div>
    </div>
</div>

@code {
    [Parameter]
    public int ProductID { get; set; }

    private Product product;
    private Product buyproduct = new Product();
    private List<Product> similarProducts = new List<Product>();
    private int selectedSizeProductId;
    private int selectedSizeProductQuality = 1;
    public int FixedBillID { get; set; }
    public int FixedUserID { get; set; }

    public BillDetail detailData = new BillDetail();
    private BillDetail ReceivedDetail;

    private bool IsLoggedIn = false;
    private string UserName = null;
    private int UserID = 0;


    public string FormSubmitMessage { get; set; } = string.Empty;

    string urlDetail = $"http://localhost:20714/api/BillDetails";
    string imageBasePath = "http://localhost:49972/images/";

    protected override async Task OnInitializedAsync()
    {
        await LoadProductDetails();
        await LoadSimilarProducts();
        await GetSession();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("attachQuantityHandlers");
        }
    }

    private async Task HandleAddToCartClick()
    {
        if (selectedSize.Name != null)
        {
            if (!IsLoggedIn)
            {
                nv.NavigateTo("/login", true);
            }
            else
            {
                var cartItem = new CartItem
                    {
                        ProductID = ProductID,
                        ProductName = product.Name,
                        SizeName = selectedSize.Name,
                        Price = selectedSize.Price,
                        Quantity = selectedSizeProductQuality,
                        UserID = UserID
                    };

                var cartItemsJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "cartItems");
                var cartItems = string.IsNullOrEmpty(cartItemsJson) ? new List<CartItem>() : JsonConvert.DeserializeObject<List<CartItem>>(cartItemsJson);

                var existingItem = cartItems.FirstOrDefault(item => item.ProductID == cartItem.ProductID && item.SizeName == cartItem.SizeName);
                if (existingItem != null)
                {
                    existingItem.Quantity += cartItem.Quantity;
                }
                else
                {
                    cartItems.Add(cartItem);
                }

                var updatedCartJson = JsonConvert.SerializeObject(cartItems);
                await jsRuntime.InvokeVoidAsync("sessionStorage.setItem", "cartItems", updatedCartJson);

                Console.WriteLine("Sản phẩm đã được thêm vào giỏ hàng.");
            }
        }
        else
        {
            Console.WriteLine("Vui lòng chọn kích cỡ.");
        }
    }


    private void HandleBuyNowClick()
    {
        if (selectedSize.Name != null)
        {
            if (!IsLoggedIn)
            {
                nv.NavigateTo("/login", true);
            }
            else
            {
                var totalPrice = selectedSizeProductQuality * selectedSize.Price;
                Console.WriteLine($"Mua ngay sản phẩm: {product.Name}, Kích cỡ: {selectedSize.Name}, Giá: {selectedSize.Price} VNĐ");
                var url = $"/order-summary?productID={ProductID}&productName={Uri.EscapeDataString(product.Name)}&sizeName={Uri.EscapeDataString(selectedSize.Name)}&price={totalPrice}&quantity={selectedSizeProductQuality}&userid={UserID}";
                nv.NavigateTo(url);
            }
        }
        else
        {
            Console.WriteLine("Vui lòng chọn kích cỡ.");
        }
    }

    private async Task LoadProductDetails()
    {
        string url = $"http://localhost:20714/api/Products/{ProductID}";
        var response = await httpClient.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var apiResponse = await response.Content.ReadAsStringAsync();
            product = JsonConvert.DeserializeObject<Product>(apiResponse);

            string urlImage = $"http://localhost:20714/api/Images?ProductID={ProductID}";
            response = await httpClient.GetAsync(urlImage);
            if (response.IsSuccessStatusCode)
            {
                var imageResponse = await response.Content.ReadAsStringAsync();
                var images = JsonConvert.DeserializeObject<List<Image>>(imageResponse);
                product.Image = images;
            }
        }
    }

    private async Task LoadSimilarProducts()
    {
        if (product != null)
        {
            string url = $"http://localhost:20714/api/Products?CateID={product.CateID}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var apiResponse = await response.Content.ReadAsStringAsync();
                var allProducts = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
                similarProducts = allProducts.Where(p => p.CateID == product.CateID && p.ProductID != product.ProductID).ToList();
            }
        }
    }

    public async Task<int> GetBillIDByUserName(string userName)
    {
        int billID = 0;
        using (var client = new HttpClient())
        {
            // Thay đổi URL thành endpoint thực tế của bạn
            string url = $"http://localhost:20714/api/BillDetails/{userName}";

            using (var response = await client.GetAsync(url))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    var billDetails = JsonConvert.DeserializeObject<List<BillDetail>>(apiResponse);
                    if (billDetails != null && billDetails.Any())
                    {
                        // Giả sử bạn lấy BillID từ phần tử đầu tiên trong danh sách
                        billID = billDetails.FirstOrDefault()?.BillID ?? 0;
                    }
                }
                else
                {
                    // Xử lý lỗi nếu cần
                    Console.WriteLine("Lỗi khi lấy BillID: " + apiResponse);
                }
            }
        }
        return billID;
    }


    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";

    private void DecreaseQuantity()
    {
        if (selectedSizeProductQuality > 1)
        {
            selectedSizeProductQuality--;
        }
    }

    private void IncreaseQuantity()
    {
        if (selectedSizeProductQuality < 10)
        {
            selectedSizeProductQuality++;
        }
    }

    async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                UserName = userInfo.UserName;
                UserID = userInfo.UserID;
            }
        }
    }

    private Size selectedSize = new Size();

    private void UpdateSelectedSize(Size sizeProduct)
    {
        selectedSize = sizeProduct;
    }

    private string GetImagePath(string imageName) => $"{imageBasePath}{imageName}";
}
