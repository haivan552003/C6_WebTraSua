@page "/details/{ProductID:int}"
@inject NavigationManager nv;
@inject HttpClient httpClient;
@inject IJSRuntime jsRuntime
<div class="container">
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <div class="path">
                <h5>Home/Product/ProductDetail</h5>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <!-- product image -->
                    @if (product?.Image != null && product.Image.Any())
                    {
                        var imagesForProduct = product.Image.Where(img => img.ProductID == product.ProductID).ToList();

                        if (imagesForProduct.Any())
                        {
                            <img id="mainImage" src="@imagesForProduct.First().Name" class="img-fluid h-75 w-100 main-image" />
                            <div class="row secondary">
                                @foreach (var image in imagesForProduct.Take(4))
                                {
                                    <div class="col-md-3">
                                        <img src="@image.Name" class="img-fluid h-100 w-100 secondary-img" onclick="changeMainImage('@image.Name')" />
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p>Loading...</p>
                        }
                    }
                    else
                    {
                        <p>Loading...</p>
                    }
                </div>

                @if (product != null)
                {
                    <div class="col-md-8">
                        <h1 class="product-name">@product.Name</h1>
                        <p class="description">@product.Description1</p>
                        <div class="row">
                            <div class="col-md-3">
                                <p><i class="fa-solid fa-leaf fs-5"></i> Trà</p>
                            </div>
                            <div class="col-md-3">
                                <p><i class="fa-solid fa-mug-hot fs-5"></i> Sữa</p>
                            </div>
                            <div class="col-md-3">
                                <p><i class="fa-solid fa-cake-candles fs-5"></i> Bánh kem</p>
                            </div>
                        </div>
                        @if (product?.Size_Product != null && product.Size_Product.Any())
                        {
                            var sizeForProduct = product.Size_Product.Where(size => size.ProductID == product.ProductID).ToList();
                            if (sizeForProduct.Any())
                            {
                                var firstSize = sizeForProduct.FirstOrDefault();
                                <h1>Giá: @firstSize.Price VNĐ</h1>
                            }
                        }
                        <div class="size">
                            <p>Size:</p>
                            <select class="form-select" @bind="selectedSizeProductId">
                                @foreach (var sizeProduct in product.Size_Product)
                                {
                                    <option value="@sizeProduct.SizeProductID">@sizeProduct.Size.Name</option>
                                }
                            </select>
                        </div>

                        <div class="row">
                            <div class="col-md-6 d-flex">
                                <div class="quantity-control me-3">
                                    <button id="decreaseBtn" @onclick="DecreaseQuantity">-</button>
                                    <input type="text" id="quantityInput" @bind="selectedSizeProductQuality" step="1" min="1" max="10" readonly>
                                    <button id="increaseBtn" @onclick="IncreaseQuantity">+</button>
                                </div>
                                <button class="btn btn-black mt-30" style="width: 270px;" @onclick="HandleValidSubmit">
                                    <i class="fa-solid fa-cart-shopping"></i> THÊM VÀO GIỎ
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
        <div class="col-md-1"></div>
    </div>
    <div class="row info-section">
        <div class="col-md-6">
            <h3>Topping thêm</h3>
            <div class="icon-text">
                <span><strong>Thạch chân mèo : 10k</strong></span>
            </div>
            <div class="icon-text">
                <span><strong>Chân châu đen : 10k</strong></span>
            </div>
            <div class="icon-text">
                <span><strong>Pudding (Matcha, Cacao, Trứng) : 10k</strong></span>
            </div>
        </div>
        <div class="col-md-6">
            <h3>Mô tả sản phẩm</h3>
            <div class="row">
                <div class="col-6">
                    <p><strong>Hương vị</strong><br>Ngọt vừa phải, đậm trà</p>
                </div>
                <div class="col-6">
                    <p><strong>Topping đi kèm</strong><br>Chân châu đen, pudding</p>
                </div>
                <div class="col-6">
                    <p><strong>Caffeine</strong><br>Không quá cao</p>
                </div>
                <div class="col-6">
                    <p><strong>Năng lượng</strong><br>100KCALO</p>
                </div>
            </div>
            <hr>
            <h3>Nguyên liệu</h3>
            <p>Trà đen Phúc Long, bột béo, bột sữa, đường,.....</p>
        </div>
    </div>
    <div class="row same-product">
        <h2>Sản phẩm tương tự</h2>
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <div class="row">
                @foreach (var similarProduct in similarProducts)
                {
                    <div class="col-md-4">
                        <div class="card card-prodcut-same" style="width: 15rem;">
                            @if (similarProduct.Image != null && similarProduct.Image.Any())
                            {
                                @foreach (var image in similarProduct.Image.Take(1))
                                {
                                    <img src="@image.Name" class="card-img-top" style="width:100px; height:100px">
                                }
                            }
                            else
                            {
                                <img src="default.jpg" class="card-img-top h-75">
                            }
                            <div class="card-body">
                                <p class="card-text name">@similarProduct.Name</p>
                                @if (similarProduct?.Size_Product != null && similarProduct.Size_Product.Any())
                                {
                                    var sizeForProduct = similarProduct.Size_Product.Where(size => size.ProductID == similarProduct.ProductID).ToList();
                                    if (sizeForProduct.Any())
                                    {
                                        var firstSize = sizeForProduct.FirstOrDefault();
                                        <h6>Giá: @firstSize.Price VNĐ</h6>
                                    }
                                }

                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-2"></div>
    </div>
</div>

@code {
    [Parameter]
    public int ProductID { get; set; }

    private Product product;
    private List<Product> similarProducts = new List<Product>();
    private int selectedSizeProductId;
    private int selectedSizeProductQuality = 1;
    public int FixedBillID { get; set; }
    public int FixedUserID { get; set; }

    public BillDetail detailData = new BillDetail();
    private BillDetail ReceivedDetail;

    private bool IsLoggedIn = false;
    private string UserName = null;


    public string FormSubmitMessage { get; set; } = string.Empty;

    string urlDetail = $"http://localhost:20714/api/BillDetails";

    protected override async Task OnInitializedAsync()
    {
        await LoadProductDetails();
        await LoadSimilarProducts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await jsRuntime.InvokeVoidAsync("attachQuantityHandlers");
        }
    }

    private async Task LoadProductDetails()
    {
        string url = $"http://localhost:20714/api/Products/{ProductID}";
        var response = await httpClient.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var apiResponse = await response.Content.ReadAsStringAsync();
            product = JsonConvert.DeserializeObject<Product>(apiResponse);

            string urlImage = $"http://localhost:20714/api/Images?ProductID={ProductID}";
            response = await httpClient.GetAsync(urlImage);
            if (response.IsSuccessStatusCode)
            {
                var imageResponse = await response.Content.ReadAsStringAsync();
                var images = JsonConvert.DeserializeObject<List<Image>>(imageResponse);
                product.Image = images;
            }

            string urlSizeProduct = $"http://localhost:20714/api/Size_Product?ProductID={ProductID}";
            response = await httpClient.GetAsync(urlSizeProduct);
            if (response.IsSuccessStatusCode)
            {
                var sizeProductResponse = await response.Content.ReadAsStringAsync();
                var sizeProducts = JsonConvert.DeserializeObject<List<Size_Product>>(sizeProductResponse);
                product.Size_Product = sizeProducts;
            }
        }
    }

    private async Task LoadSimilarProducts()
    {
        if (product != null)
        {
            string url = $"http://localhost:20714/api/Products?CateID={product.CateID}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var apiResponse = await response.Content.ReadAsStringAsync();
                var allProducts = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
                similarProducts = allProducts.Where(p => p.CateID == product.CateID && p.ProductID != product.ProductID).ToList();
            }
        }
    }

    public async Task<int> GetBillIDByUserName(string userName)
    {
        int billID = 0;
        using (var client = new HttpClient())
        {
            // Thay đổi URL thành endpoint thực tế của bạn
            string url = $"http://localhost:20714/api/BillDetails/{userName}";

            using (var response = await client.GetAsync(url))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    var billDetails = JsonConvert.DeserializeObject<List<BillDetail>>(apiResponse);
                    if (billDetails != null && billDetails.Any())
                    {
                        // Giả sử bạn lấy BillID từ phần tử đầu tiên trong danh sách
                        billID = billDetails.FirstOrDefault()?.BillID ?? 0;
                    }
                }
                else
                {
                    // Xử lý lỗi nếu cần
                    Console.WriteLine("Lỗi khi lấy BillID: " + apiResponse);
                }
            }
        }
        return billID;
    }

    public async Task HandleValidSubmit()
    {
        // Lấy UserName từ session
        await GetSession();

        // Lấy BillID dựa trên UserName
        int billID = await GetBillIDByUserName(UserName);

        // Nếu không lấy được BillID, trả về hoặc xử lý lỗi
        if (billID == 0)
        {
            FormSubmitMessage = "Không lấy được BillID từ API.";
            return;
        }

        // Cập nhật thông tin chi tiết
        detailData.BillID = billID;
        detailData.Quality = selectedSizeProductQuality;
        detailData.SizeProductID = selectedSizeProductId;
        detailData.Subtotal = selectedSizeProductId * 25000;

        ReceivedDetail = new BillDetail();
        using (var client = new HttpClient())
        {
            StringContent content = new StringContent(JsonConvert.SerializeObject(detailData), Encoding.UTF8, "application/json");

            using (var response = await client.PostAsync("http://localhost:20714/api/BillDetails", content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    ReceivedDetail = JsonConvert.DeserializeObject<BillDetail>(apiResponse);
                    FormSubmitMessage = "Thêm chi tiết hóa đơn thành công!";
                }
                else
                {
                    FormSubmitMessage = "Thêm thất bại: " + apiResponse;
                }
            }
        }
    }



    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";

    private void DecreaseQuantity()
    {
        if (selectedSizeProductQuality > 1)
        {
            selectedSizeProductQuality--;
        }
    }

    private void IncreaseQuantity()
    {
        if (selectedSizeProductQuality < 10)
        {
            selectedSizeProductQuality++;
        }
    }

    async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                UserName = userInfo.UserName;
            }
        }
    }
}
