@page "/getimg"
@inject IJSRuntime jsRuntime

<p> <a href="createimg">Thêm Hình Ảnh Sản Phẩm</a></p>
<h3>Danh Sách Ảnh</h3>
<table class="table">
    <thead>
        <tr>
            <th>Hình Ảnh</th>
            <th>Khác</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var image in Roless)
        {
            <tr>
                <td>
                    <img src="@GetImagePath(image.Name)" width="100" />
                </td>

                <td>
                    <button class="btn btn-sm btn-danger" @onclick="@(() => Delete(image))">
                        Xóa
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool IsLoggedIn = false;
    private int RoleID = 0;

    string url = "http://localhost:20714/api/Images";
    string imageBasePath = "http://localhost:49972/images/";

    public IEnumerable<Image> Roless { get; set; } = Enumerable.Empty<Image>();

    protected override async Task OnInitializedAsync()
    {
        await CallAPI();
        await GetSession();
    }

    async Task CallAPI()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(url);
            var apiResponse = await response.Content.ReadAsStringAsync();
            Roless = JsonConvert.DeserializeObject<List<Image>>(apiResponse);
        }
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }

    public async Task Delete(Image r)
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.DeleteAsync(url + "/" + r.ImageID))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
            }
        }
        await CallAPI();
    }

    private string GetImagePath(string imageName) => $"{imageBasePath}{imageName}";
}
