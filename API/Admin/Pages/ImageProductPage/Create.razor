@page "/createimg"
@inject IJSRuntime jsRuntime

@using Microsoft.AspNetCore.Components.Forms


<h1>Thêm hình ảnh sản phẩm</h1>
<EditForm Model="uploadModel">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="font-weight-bold">Tên Sản Phẩm</label>
        <InputSelect @bind-Value="uploadModel.ProductID" class="form-control">
            @foreach (Product item in pro)
            {
                <option value="@item.ProductID">@item.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label class="font-weight-bold">Chọn Hình Ảnh</label>
        <InputFile OnChange="ChangeHandler" />
    </div>

     <div class="form-group">
        <button @onclick="UploadFile" class="btn btn-primary">Thêm Hình Ảnh</button>
     </div>

    <p>@apiResponse</p>
</EditForm> 

@code {
    string url = "http://localhost:20714/api/Images/UploadFile";
    string urlPro = "http://localhost:20714/api/Products";
    private bool IsLoggedIn = false;
    private int RoleID = 0;

    public IEnumerable<Product> pro { get; set; } = Enumerable.Empty<Product>();

    public string apiResponse { get; set; }
    public IBrowserFile F;
    private Image uploadModel = new Image();

    private void ChangeHandler(InputFileChangeEventArgs e)
    {
        F = e.File;
    }

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await GetSession();
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }

    private async Task Load()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlPro);
            var apiResponse = await response.Content.ReadAsStringAsync();
            pro = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
        }
    }

    public async Task UploadFile()
    {
        if (F != null && uploadModel.ProductID > 0)
        {
            using (var ms = F.OpenReadStream(968435456))
            {
                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(ms), "file", F.Name);
                content.Add(new StringContent(uploadModel.ProductID.ToString()), "ProductID");

                using (var httpClient = new HttpClient())
                {
                    using (var response = await httpClient.PostAsync(url, content))
                    {
                        response.EnsureSuccessStatusCode();
                        apiResponse = await response.Content.ReadAsStringAsync();
                    }
                }
            }
        }
        else
        {
            apiResponse = "Please provide a valid Product ID.";
        }
    }

    public class Image
    {
        public int ProductID { get; set; }
        public IBrowserFile File { get; set; }
    }
}
