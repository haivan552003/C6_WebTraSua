@page "/GetBanner"
@inject NavigationManager nv

@inject IJSRuntime jsRuntime

@if (banner != null)
{
    <p> <a href="CreateBanner">Thêm Bảng Hiệu</a></p>
    <div class="panel panel-primary">
        <!-- Default panel contents -->
        <div class="panel-heading"><h2>Thông tin bảng hiệu</h2></div>

        <!-- Table -->
        <table class="table">
            <tr>
                <th>Hình ảnh</th>
                <th>Tiêu Đề</th>
                <th>Trạng thái</th>
                <th>Khác</th>
            </tr>
            @foreach (var item in banner)
            {
                <tr>
                    <td>
                        <img src="@GetImagePath(item.Image)" width="100" height="100" />
                    </td>
                    <td>@item.Title</td>
                    @if (item.Status == 0)
                    {
                        <td>@item.Status.ToString("Hợp lệ")</td>
                    }
                    else
                    {
                        <td>@item.Status.ToString("Không hợp lệ")</td>

                    }
                    <td>
                        <a class="btn btn-sm btn-success" href="UpdateBanner/@item.Id">
                            Sửa
                        </a> |
                        <button class="btn btn-sm btn-danger" @onclick="@(() => Delete(item.Id))">
                            Xóa
                        </button>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {

    string imageBasePath = "http://localhost:49972/images";

    string urlBanner = "http://localhost:20714/api/Banners";
    public string FormSubmitMessage { get; set; } = null;
    public IEnumerable<Banner> banner { get; set; } = Enumerable.Empty<Banner>();

    private bool IsLoggedIn = false;
    private int RoleID = 0;


    protected async override Task OnInitializedAsync()
    {
        await CallAPI();
        await GetSession();
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }


    async Task CallAPI()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlBanner);
            var apiResponse = await response.Content.ReadAsStringAsync();
            banner = JsonConvert.DeserializeObject<List<Banner>>(apiResponse);
        }
    }

    public async Task Delete(int bannerId)
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.DeleteAsync($"{urlBanner}/{bannerId}"))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
            }
        }
        await CallAPI();
    }

    private string GetImagePath(string imageName) => $"{imageBasePath}/{imageName}";
}
