@page "/GetBanner"
@inject NavigationManager nv
@inject IJSRuntime jsRuntime

@if (PaginatedProducts != null && PaginatedProducts.Any())
{
    <p> <a href="CreateBanner">Thêm Bảng Hiệu</a></p>
    <div class="panel panel-primary">
        <!-- Default panel contents -->
        <div class="panel-heading"><h2>Thông tin bảng hiệu</h2></div>

        <div>
            <label for="searchInput">Tìm kiếm:</label>
            <input type="text" id="searchInput" @bind="searchQuery" placeholder="Nhập tên Title..." />
            <button class="btn-search btn btn-primary" @onclick="OnSearchClicked">Tìm kiếm</button>
        </div>

        <!-- Table -->
        <table class="table">
            <thead>
                <tr>
                    <th>Hình ảnh</th>
                    <th>Tiêu Đề</th>
                    <th>Trạng thái</th>
                    <th>Khác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in PaginatedProducts)
                {
                    <tr>
                        <td>
                            <img src="@GetImagePath(item.Image)" width="100" height="100" />
                        </td>
                        <td>@item.Title</td>
                        <td>@(item.Status == 0 ? "Hợp lệ" : "Không hợp lệ")</td>
                        <td>
                            <a class="btn btn-sm btn-success" href="UpdateBanner/@item.Id">
                                Sửa
                            </a> |
                            <button class="btn btn-sm btn-danger" @onclick="@(() => ConfirmDelete(item.Id))">
                                Xóa
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Không có bảng hiệu nào được tìm thấy.</p>
}

<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item">
            <a class="page-link" @onclick="PreviousPage" disabled="@(!CanGoBack)">
                <span aria-hidden="true"><i class="fa-light fa-hand-point-left"></i></span>
            </a>
        </li>
        <li class="page-item"><span class="page-link text-black">Trang @currentPage trên @totalPages</span></li>
        <li class="page-item">
            <a class="page-link" @onclick="NextPage" disabled="@(!CanGoNext)">
                <span aria-hidden="true"><i class="fa-regular fa-hand-point-right"></i></span>
            </a>
        </li>
    </ul>
</nav>
<script>
    function confirmDelete(message) {
        return new Promise((resolve) => {
            const result = confirm(message);
            resolve(result);
        });
    }
</script>

@code {
    string imageBasePath = "http://localhost:49972/images";
    string urlBanner = "http://localhost:20714/api/Banners";
    public string searchQuery { get; set; } = string.Empty;
    public IEnumerable<Banner> banner { get; set; } = Enumerable.Empty<Banner>();
    public IEnumerable<Banner> filteredBanner { get; set; } = Enumerable.Empty<Banner>();

    private bool IsLoggedIn = false;
    private int RoleID = 0;
    private int currentPage = 1;
    private int pageSize = 5;
    private string selectedStatus = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await CallAPI();
        await GetSession();
        ApplyFilters();
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }

    async Task CallAPI()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlBanner);
            var apiResponse = await response.Content.ReadAsStringAsync();
            banner = JsonConvert.DeserializeObject<List<Banner>>(apiResponse);
            ApplyFilters(); // Gọi ApplyFilters sau khi lấy dữ liệu từ API
        }
    }

    private async Task ConfirmDelete(int bannerId)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmDelete", "Bạn có chắc chắn muốn xóa bảng hiệu này không?");
        if (confirmed)
        {
            await Delete(bannerId);
        }
    }

    public async Task Delete(int bannerId)
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.DeleteAsync($"{urlBanner}/{bannerId}"))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
            }
        }
        await CallAPI();
    }

    private void ApplyFilters()
    {
        // Bắt đầu với danh sách banner gốc
        var filtered = banner.AsEnumerable();

        // Áp dụng tìm kiếm dựa trên tiêu đề
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filtered = filtered.Where(b => b.Title.ToLower().Contains(searchQuery.ToLower()));
        }

        // Cập nhật danh sách banner đã lọc
        filteredBanner = filtered.ToList();
    }

    private List<Banner> PaginatedProducts => filteredBanner.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

    private int totalPages => (int)Math.Ceiling((double)filteredBanner.Count() / pageSize);
    private bool CanGoBack => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;

    private string GetImagePath(string imageName) => $"{imageBasePath}/{imageName}";

    private void PreviousPage()
    {
        if (CanGoBack)
        {
            currentPage--;
            ApplyFilters(); // Refresh the filtered list for the new page
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            ApplyFilters(); // Refresh the filtered list for the new page
        }
    }

    private async void OnSearchClicked()
    {
        currentPage = 1;
        ApplyFilters();
    }

    private async void sortStatus(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
        currentPage = 1; // Reset to the first page after sorting
        ApplyFilters();
    }
}
