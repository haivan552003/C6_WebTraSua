@page "/UpdateBanner/{Id:int}"
@using System.Text
@inject IJSRuntime jsRuntime

<EditForm Model="bannerData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="font-weight-bold">Tiêu Đfề</label>
        <InputText class="form-control" @bind-Value="bannerData.Title" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>bannerData.Title"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label class="font-weight-bold">Trạng Thái</label>
        <InputSelect class="form-control" @bind-Value="bannerData.Status">
            <option value="0" selected>Hợp lệ</option>
            <option value="1">Không hợp lệ</option>
        </InputSelect>

        <div class="text-danger ps-3">
            <ValidationMessage For="()=>bannerData.Status">

            </ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Sửa Bảng Hiệu</button>
    </div>
</EditForm>
<p class="text-success p-2 ms-auto">@FormSubmitMessage</p>

@code {
    string urlPro = "http://localhost:20714/api/Banners";
    public Banner bannerData = new Banner();
    Banner ReceivedBlog;
    public string FormSubmitMessage { get; set; } = string.Empty;

    private bool IsLoggedIn = false;
    private int RoleID = 0;

    protected async override Task OnInitializedAsync()
    {
        await GetSession();
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        bannerData = new Banner();
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync($"{urlPro}/{Id}"))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                bannerData = JsonConvert.DeserializeObject<Banner>(apiResponse);
            }
        }
    }

    public async Task HandleValidSubmit()
    {
        ReceivedBlog = new Banner();
        using (var httpClient = new HttpClient())
        {
            var jsonContent = new StringContent(JsonConvert.SerializeObject(bannerData), Encoding.UTF8, "application/json");

            using (var response = await httpClient.PutAsync($"{urlPro}/{bannerData.Id}", jsonContent))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    ReceivedBlog = JsonConvert.DeserializeObject<Banner>(apiResponse);
                    FormSubmitMessage = "Sửa bảng hiệu thành công !";
                }
                else
                {
                    FormSubmitMessage = "Sửa thất bại: " + apiResponse;
                }
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";
}
