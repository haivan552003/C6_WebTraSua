@page "/bill"
@using QRCoder
@using System.Drawing.Imaging
@using System.IO
@inject IJSRuntime JSRuntime

<h3>Danh Sách Hóa Đơn</h3>

<div id="printableArea" class="panel panel-primary">
    <div class="panel-heading">
        <h2>Thông tin hóa đơn</h2>
    </div>

    @if (bill == null || !bill.Any())
    {
        <div class="alert alert-warning">
            Không có hóa đơn nào để hiển thị.
        </div>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Mã hóa đơn</th>
                    <th>Ngày</th>
                    <th>Thành tiền</th>
                    <th>Người dùng</th>
                    <th>Trạng thái</th>
                    <th>Mã QR</th>
                    <th>Xem chi tiết</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bills in bill)
                {
                    <tr>
                        <td>@bills.BillId</td>
                        <td>@bills.Date.ToShortDateString()</td>
                        <td>@bills.Total.ToString("N0", new System.Globalization.CultureInfo("vi-VN")) VNĐ</td>
                        <td>@bills.User.Name</td>
                        <td>@bills.Status.Name</td>
                        <td>
                            @if (string.IsNullOrEmpty(GenerateQRCode(bills.BillId)))
                            {
                                <span>Không có chi tiết hóa đơn</span>
                            }
                            else
                            {
                                <img src="@GenerateQRCode(bills.BillId)" width="150px" height="150px" alt="QR Code" />
                            }
                        </td>
                        <td><a href="/billdetails/@bills.BillId">Xem chi tiết</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    string urlBill = "http://localhost:20714/api/Bills";
    string urlPro = "http://localhost:20714/api/Products";
    string urlSizeProduct = "http://localhost:20714/api/Size_Product";
    string urlBillDetails = "http://localhost:20714/api/BillDetails";

    public IEnumerable<Admin.Model.Bill> bill { get; set; } = Enumerable.Empty<Admin.Model.Bill>();
    public IEnumerable<Product> products { get; set; } = Enumerable.Empty<Product>();
    public IEnumerable<BillDetail> billDetails { get; set; } = Enumerable.Empty<BillDetail>();

    protected async override Task OnInitializedAsync()
    {
        await CallAPI();
    }

    async Task CallAPI()
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlBill))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                bill = JsonConvert.DeserializeObject<List<Admin.Model.Bill>>(apiResponse);
            }
        }
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlPro))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                products = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
            }
        }
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlBillDetails))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                billDetails = JsonConvert.DeserializeObject<List<BillDetail>>(apiResponse);
            }
        }
    }

    private string GenerateQRCode(int billId)
    {
        // Ensure billDetails is loaded and contains data
        if (billDetails == null || !billDetails.Any())
        {
            return string.Empty; // Handle as needed
        }

        var billDetailsForBill = billDetails.Where(d => d.BillID == billId).ToList();

        if (!billDetailsForBill.Any())
        {
            return string.Empty; // Handle as needed
        }

        var qrText = $"Hóa đơn: {billId}\n";
        foreach (var detail in billDetailsForBill)
        {
            var productName = products.FirstOrDefault(p => p.ProductID == detail.ProductID)?.Name ?? "N/A";

            qrText += $"Tên sản phẩm: {productName}\n" +
                      $"Số lượng: {detail.Quality}\n" +
                      $"Tổng tiền: {detail.Subtotal.ToString("N0", new System.Globalization.CultureInfo("vi-VN"))} VNĐ\n";
        }

        using (var qrGenerator = new QRCodeGenerator())
        {
            var qrCodeData = qrGenerator.CreateQrCode(qrText, QRCodeGenerator.ECCLevel.Q);
            using (var qrCode = new QRCode(qrCodeData))
            {
                using (var bitmap = qrCode.GetGraphic(20))
                {
                    using (var stream = new MemoryStream())
                    {
                        bitmap.Save(stream, ImageFormat.Png);
                        byte[] byteArray = stream.ToArray();
                        return "data:image/png;base64," + Convert.ToBase64String(byteArray);
                    }
                }
            }
        }
    }


    private async Task PrintSelectedArea()
    {
        await JSRuntime.InvokeVoidAsync("printSelectedArea", "printableArea");
    }
}
