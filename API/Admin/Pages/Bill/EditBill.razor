@page "/EditBill/{id:int}"
@using System.Text
<h3>Create</h3>

<EditForm Model="proData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="UpdateBill">
    <DataAnnotationsValidator />
    <h1>Sửa Sản Phẩm</h1>
    <div class="form-group">
        <label>Ngày</label>
        <InputDate class="form-control" @bind-Value="proData.Date" placeholder="Ngày" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.Date"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Thành tiền</label>
        <InputNumber class="form-control" @bind-Value="proData.Total" placeholder="Tổng" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.Total"></ValidationMessage>
        </div>
    </div>

    <div class="form-group">
        <label>User</label>
        <InputSelect class="form-control" @bind-Value="proData.UserID">
            @foreach (User item in users)
            {
                @item.Name
                <option value="@item.UserId">@item.Name</option>
            }
        </InputSelect>
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.UserID"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Trạng thái</label>
        <InputSelect class="form-control" @bind-Value="proData.StatusID">
            @foreach (Status item in statuses)
            {
                @item.Name
                <option value="@item.StatusId">@item.Name</option>
            }
        </InputSelect>
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.StatusID"></ValidationMessage>
        </div>
    </div>


    <div class="form-group">
        <button type="submit" class="btn btn-primary">Sửa hóa đơn</button>
    </div>
    <p class="text-danger text-center p-2">@FormSubmitMessage</p>
</EditForm>

@code {
    string urlBill = "http://localhost:20714/api/Bills";
    string urlUser = "http://localhost:20714/api/Users";
    string urlStatus = "http://localhost:20714/api/Status";

    public Admin.Model.Bill proData = new Admin.Model.Bill();
    Admin.Model.Bill ReceivedPro;
    public IEnumerable<User> users { get; set; } = Enumerable.Empty<User>();
    public IEnumerable<Status> statuses { get; set; } = Enumerable.Empty<Status>();
    public string FormSubmitMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlUser))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                users = JsonConvert.DeserializeObject<List<User>>(apiResponse);
            }
            using (var response = await httpClient.GetAsync(urlStatus))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                statuses = JsonConvert.DeserializeObject<List<Status>>(apiResponse);
            }
        }
    }

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        proData = new Admin.Model.Bill();
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync($"{urlBill}/{Id}"))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                proData = JsonConvert.DeserializeObject<Admin.Model.Bill>(apiResponse);
            }
        }
    }

    public async Task HandleValidSubmit()
    {
        ReceivedPro = new Admin.Model.Bill();
        using (var httpClient = new HttpClient())
        {
            var jsonSettings = new JsonSerializerSettings
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                };

            var jsonContent = new StringContent(JsonConvert.SerializeObject(proData, jsonSettings), Encoding.UTF8, "application/json");

            using (var response = await httpClient.PutAsync($"{urlBill}/{proData.BillId}", jsonContent))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    ReceivedPro = JsonConvert.DeserializeObject<Admin.Model.Bill>(apiResponse);
                    FormSubmitMessage = "Sửa thành công!";
                }
                else
                {
                    FormSubmitMessage = "Sửa thất bại: " + apiResponse;
                }
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";
}