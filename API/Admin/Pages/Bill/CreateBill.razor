@page "/createbill"
@using System.Text
<h3>Thêm Hóa Đơn</h3>

<EditForm Model="proData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="CreateBill">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Ngày Tạo</label>
        <InputDate class="form-control" @bind-Value="proData.Date" placeholder="Ngày" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.Date"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Thành Tiền</label>
        <InputNumber class="form-control" @bind-Value="proData.Total" placeholder="Tổng" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.Total"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Khách Hàng</label>
        <InputSelect class="form-control" @bind-Value="proData.UserID">
            @foreach (User item in users)
            {
                @item.Name
                <option value="@item.UserId">@item.Name</option>
            }
        </InputSelect>
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.UserID"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Trạng Thái</label>
        <InputSelect class="form-control" @bind-Value="proData.StatusID">
            @foreach (Status item in statuses)
            {
                @item.Name
                <option value="@item.StatusId">@item.Name</option>
            }
        </InputSelect>
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>proData.StatusID"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Thêm Hóa Đơn</button>
    </div>
</EditForm>
<p class="text-success p-2 ms-auto">@FormSubmitMessage</p>

@code {
    string urlBill = "http://localhost:20714/api/Bills";
    string urlUser = "http://localhost:20714/api/Users";
    string urlStatus = "http://localhost:20714/api/Status";

    public Admin.Model.Bill proData = new Admin.Model.Bill();
    Admin.Model.Bill ReceivedPro;
    public List<User> users { get; set; } = new List<User>();
    public List<Status> statuses { get; set; } = new List<Status>();
    public string FormSubmitMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlUser))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                users = JsonConvert.DeserializeObject<List<User>>(apiResponse);
            }
        }

        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlStatus))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                statuses = JsonConvert.DeserializeObject<List<Status>>(apiResponse);
            }
        }
    }

    public async Task HandleValidSubmit()
    {
        ReceivedPro = new Admin.Model.Bill();
        using (var httpClient = new HttpClient())
        {
            StringContent content = new StringContent(JsonConvert.SerializeObject(proData), Encoding.UTF8, "application/json");

            using (var response = await httpClient.PostAsync(urlBill, content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    ReceivedPro = JsonConvert.DeserializeObject<Admin.Model.Bill>(apiResponse);
                    FormSubmitMessage = "Thêm thành công!";
                }
                else
                {
                    FormSubmitMessage = "Thêm thất bại: " + apiResponse;
                }
            }
        }

        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlUser))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                users = JsonConvert.DeserializeObject<List<User>>(apiResponse);
            }
        }
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlStatus))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                statuses = JsonConvert.DeserializeObject<List<Status>>(apiResponse);
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";

}