@page "/UpdateBlog/{id:int}"
@using System.Text
@using System.Net.Http
@using System.Net.Http.Headers
@using Newtonsoft.Json
@inject IJSRuntime jsRuntime

<EditForm Model="BlogData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="UpdateBlog">
    <DataAnnotationsValidator />
    <h1>Chỉnh Sửa Bài Viết</h1>

    <div class="form-group">
        <InputNumber hidden class="form-control" @bind-Value="BlogData.Id" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>BlogData.Id"></ValidationMessage>
        </div>
    </div>

    <div class="form-group">
        <label class="font-weight-bold">Tiêu Đề</label>
        <InputText class="form-control" @bind-Value="BlogData.Title" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>BlogData.Title"></ValidationMessage>
        </div>
    </div>

    <div class="form-group">
        <label class="font-weight-bold">Hình Ảnh Hiện Tại</label>
        <div>
            <img src="@GetImagePath(BlogData.Image)" alt="Current Image" width="150" height="150" />
        </div>
        <label class="font-weight-bold">Chọn Hình Ảnh Mới</label>
        <InputFile OnChange="OnInputFileChange" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>BlogData.Image"></ValidationMessage>
        </div>
    </div>

    <div class="form-group">
        <label class="font-weight-bold">Nội Dung</label>
        <InputTextArea class="form-control" @bind-Value="BlogData.Decription" />
        <div class="text-danger ps-3">
            <ValidationMessage For="()=>BlogData.Decription"></ValidationMessage>
        </div>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Sửa Bài Viết</button>
    </div>

    <p class="text-success p-2 mx-auto">@FormSubmitMessage</p>
</EditForm>

@code {
    string urlPro = "http://localhost:20714/api/Blogs";
    public Blog BlogData = new Blog();
    Blog ReceivedBlog;
    public string FormSubmitMessage { get; set; } = string.Empty;

    private bool IsLoggedIn = false;
    private int RoleID = 0;
    private IBrowserFile selectedImageFile;

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetSession();
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        BlogData = new Blog();
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync($"{urlPro}/{Id}"))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                BlogData = JsonConvert.DeserializeObject<Blog>(apiResponse);
            }
        }
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        using (var httpClient = new HttpClient())
        {
            var content = new MultipartFormDataContent();
            if (selectedImageFile != null)
            {
                var fileContent = new StreamContent(selectedImageFile.OpenReadStream());
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedImageFile.ContentType);
                content.Add(fileContent, "file", selectedImageFile.Name);
            }
            else
            {
                // Nếu không có hình ảnh mới được chọn, gửi giá trị null cho file
                content.Add(new StringContent(""), "file");
            }

            content.Add(new StringContent(BlogData.Title), "title");
            content.Add(new StringContent(BlogData.Decription), "decription");
            content.Add(new StringContent(BlogData.Id.ToString()), "id");

            using (var response = await httpClient.PostAsync($"{urlPro}/UploadFile", content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    FormSubmitMessage = "Sửa blog thành công!";
                }
                else
                {
                    FormSubmitMessage = "Sửa thất bại: " + apiResponse;
                }
            }
        }
    }




    private string GetImagePath(string imageName) => $"http://localhost:49972/images/{imageName}";

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";
}
