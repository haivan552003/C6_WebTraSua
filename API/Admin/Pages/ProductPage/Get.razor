@page "/getproduct"
@inject IJSRuntime jsRuntime

<p><a href="createproduct">Thêm Sản phẩm</a></p>
<div class="panel panel-primary">
    <div class="row">
        <div class="col-md-6">
            <div class="panel-heading">
                <h2>Thông tin sản phẩm</h2>
            </div>
        </div>
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" id="searchInput" @bind="searchQuery" placeholder="Tên sản phẩm, loại sản phẩm..." />
                <button class="input-group-text btn btn-primary" @onclick="OnSearchClicked">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </button>
            </div>
            <select @onchange="sortStatus" value="@selectedStatus">
                <option selected value=null>Tất cả trạng thái</option>
                <option value="0">Hợp lệ</option>
                <option value="1">Không Hợp lệ</option>
            </select>
        </div>
    </div>
    <table class="table">
        <tr>
            <th>Tên Sản Phẩm</th>
            <th>Hình Ảnh</th>
            <th>Đánh giá</th>
            <th>Danh Mục</th>
            <th>Trạng Thái</th>
            <th>Khác</th>
        </tr>
        @foreach (var item in PaginatedProducts)
        {
            <tr>
                <td>@item.Name</td>
                <td>
                    @if (item.Image != null && item.Image.Count > 0)
                    {
                        <img src="@GetImagePath(item.Image.First().Name)" width="100" height="100" alt="Product Image">
                    }
                    else
                    {
                        <span>Không có hình ảnh</span>
                    }
                </td>
                <td>@item.Categories.Name</td>
                <td>
                    @{
                        if (item.StatusID == 0)
                        {
                            <span>Hợp Lệ</span>
                        }
                        else if (item.StatusID == 1)
                        {
                            <span>Không Hợp Lệ</span>
                        }
                    }
                </td>
                <td>
                    <a class="btn btn-sm btn-success" href="updatepro/@item.ProductID">
                        Sửa
                    </a>
                </td>
            </tr>
        }
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item">
                <a class="page-link" @onclick="PreviousPage" disabled="@(!CanGoBack)">
                    <span aria-hidden="true"><i class="fa-regular fa-hand-point-left" ></i></span>
                </a>
            </li>
            <li class="page-item"><span class="page-link text-black">Trang @currentPage trên @totalPages</span></li>
            <li class="page-item">
                <a class="page-link" @onclick="NextPage" disabled="@(!CanGoNext)">
                    <span aria-hidden="true"><i class="fa-regular fa-hand-point-right" ></i></span>
                </a>
            </li>
        </ul>
    </nav>
    
</div>

@code {
    string imageBasePath = "http://localhost:49972/images/";
    string urlPro = "http://localhost:20714/api/Products";
    private string selectedStatus = string.Empty;
    private string searchQuery = string.Empty;
    private bool IsLoggedIn = false;
    private int RoleID = 0;

    public List<Product> product { get; set; } = new List<Product>();
    public List<Product> Fproduct { get; set; } = new List<Product>();



    private List<Product> PaginatedProducts => Fproduct.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)product.Count / pageSize);
    private bool CanGoBack => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;

    protected async override Task OnInitializedAsync()
    {
        await CallAPI();
        await GetSession();
    }

    private async Task OnSearchClicked()
    {
            ApplyFilters();
       
        currentPage = 1;
    }

    private async Task sortStatus(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
        ApplyFilters();
        currentPage = 1;
    }

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }

    async Task CallAPI()
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlPro))
            {
                if (response.IsSuccessStatusCode)
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    product = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
                    ApplyFilters();
                }
                else
                {
                    Console.WriteLine($"Failed to load data. Status code: {response.StatusCode}");
                }
            }
        }
    }

    private void ApplyFilters()
    {
        var filtered = product.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedStatus))
        {
            if (int.TryParse(selectedStatus, out int status))
            {
                filtered = filtered.Where(p => p.StatusID == status);
            }
        }

        if (!string.IsNullOrEmpty(searchQuery))
        {
            var lowerQuery = searchQuery.ToLower();
            filtered = filtered.Where(p =>
                p.Name.ToLower().Contains(lowerQuery) ||
                p.Categories.Name.ToLower().Contains(lowerQuery));
        }

        Fproduct = filtered.ToList();
    }

    private string GetImagePath(string imageName) => $"{imageBasePath}{imageName}";

    private void PreviousPage()
    {
        if (CanGoBack)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
        }
    }
}
