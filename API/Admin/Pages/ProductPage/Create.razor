@page "/createproduct"
@using System.Text
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager

<h1>Quản lý Sản phẩm</h1>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="proData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <h2>Thêm Sản Phẩm</h2>
            <div class="form-group">
                <label class="font-weight-bold">Tên Sản Phẩm</label>
                <InputText class="form-control" @bind-Value="proData.Name" placeholder="Tên sản phẩm" />
                <ValidationMessage For="() => proData.Name" />
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Mô Tả 1</label>
                <InputTextArea class="form-control" @bind-Value="proData.Description1" placeholder="Mô tả 1" />
                <ValidationMessage For="() => proData.Description1" />
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Mô Tả 2</label>
                <InputTextArea class="form-control" @bind-Value="proData.Description2" placeholder="Mô tả 2" />
                <ValidationMessage For="() => proData.Description2" />
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Danh Mục</label>
                <InputSelect class="form-control" @bind-Value="proData.CateID">
                    @foreach (var item in cate)
                    {
                        <option value="@item.CateID">@item.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => proData.CateID" />
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Trạng Thái</label>
                <InputSelect class="form-control" @bind-Value="proData.StatusID">
                    <option value="0">Hợp lệ</option>
                    <option value="1">Không hợp lệ</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary mt-3">Thêm Sản Phẩm</button>
            <p class="text-success mt-2">@FormSubmitMessage</p>
        </EditForm>
    </div>

    <div class="col-md-6">
        <h2>Thêm Hình Ảnh Sản Phẩm</h2>
        <EditForm Model="uploadModel" OnSubmit="UploadFiles">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label class="font-weight-bold">Chọn Sản Phẩm</label>
                <InputSelect @bind-Value="uploadModel.ProductID" class="form-control">
                    @foreach (var item in pro)
                    {
                        <option value="@item.ProductID">@item.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label class="font-weight-bold">Chọn Hình Ảnh</label>
                <InputFile multiple OnChange="OnFileChange" />
            </div>
            <button type="submit" class="btn btn-primary mt-3">Tải lên Hình Ảnh</button>
            <p>@apiResponse</p>
        </EditForm>
    </div>
</div>

@code {
    private bool IsLoggedIn = false;
    private int RoleID = 0;

    string urlPro = "http://localhost:20714/api/Products";
    string urlCate = "http://localhost:20714/api/Categories";
    string urlImageApi = "http://localhost:20714/api/Images";

    public Product proData = new Product();
    public IEnumerable<Categories> cate { get; set; } = new List<Categories>();
    public IEnumerable<Product> pro { get; set; } = new List<Product>();
    public string FormSubmitMessage { get; set; } = string.Empty;

    private Image uploadModel = new Image();
    private IReadOnlyList<IBrowserFile> selectedFiles;
    public string apiResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckUserAccess();
        await Load();
    }

    private async Task CheckUserAccess()
    {
        try
        {
            var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
            if (!string.IsNullOrEmpty(userInfoJson))
            {
                var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
                if (userInfo != null && userInfo.RoleID == 1)
                {
                    IsLoggedIn = true;
                    RoleID = userInfo.RoleID;
                }
                else
                {
                    navManager.NavigateTo("/no-access");
                }
            }
            else
            {
                navManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CheckUserAccess(): {ex.Message}");
        }
    }

    private async Task Load()
    {
        try
        {
            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.GetAsync(urlCate);
                string apiResponse = await response.Content.ReadAsStringAsync();
                cate = JsonConvert.DeserializeObject<List<Categories>>(apiResponse);

                response = await httpClient.GetAsync(urlPro);
                apiResponse = await response.Content.ReadAsStringAsync();
                pro = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in Load(): {ex.Message}");
        }
    }

    public async Task HandleValidSubmit()
    {
        using (var httpClient = new HttpClient())
        {
            StringContent content = new StringContent(JsonConvert.SerializeObject(proData), Encoding.UTF8, "application/json");

            using (var response = await httpClient.PostAsync(urlPro, content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    FormSubmitMessage = "Thêm sản phẩm thành công!";
                    await Load(); // Refresh product list
                }
                else
                {
                    FormSubmitMessage = "Thêm thất bại: " + apiResponse;
                }
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";

    private void OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
    }

    private async Task UploadFiles()
    {
        if (selectedFiles != null && selectedFiles.Count > 0)
        {
            foreach (var file in selectedFiles)
            {
                using (var ms = file.OpenReadStream(10 * 1024 * 1024)) // 10MB max
                {
                    var content = new MultipartFormDataContent();
                    content.Add(new StreamContent(ms), "file", file.Name);
                    content.Add(new StringContent(uploadModel.ProductID.ToString()), "ProductID");

                    using (var httpClient = new HttpClient())
                    {
                        var response = await httpClient.PostAsync(urlImageApi + "/UploadFile", content);
                        if (response.IsSuccessStatusCode)
                        {
                            apiResponse = "Tải lên thành công";
                        }
                        else
                        {
                            apiResponse = "Tải lên thất bại: " + await response.Content.ReadAsStringAsync();
                        }
                    }
                }
            }
        }
        else
        {
            apiResponse = "Chưa chọn file nào!";
        }
    }

    public class Image
    {
        public int ProductID { get; set; }
        public IBrowserFile File { get; set; }
    }
}
