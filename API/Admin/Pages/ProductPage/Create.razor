@page "/createproduct"
@using System.Text
@inject IJSRuntime jsRuntime

<style>
    #formgetpro {
        display: block;
    }

    #formgetimg {
        display: none;
    }
</style>
<div class="form-group">
    <button onclick="HideProFunction()" class="btn btn-primary">Thêm Hình Ảnh</button>
</div>
<div class="row">
    <div id="formgetpro" class="col-md-6">
        <EditForm Model="proData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="CreateProduct">
            <DataAnnotationsValidator />
            <h1>
                Thêm Sản Phẩm
            </h1>
            <div class="form-group">
                <label class="font-weight-bold">Tên Sản Phẩm</label>
                <InputText class="form-control" @bind-Value="proData.Name" placeholder="Tên sản phẩm" />
                <div class="text-danger ps-3">
                    <ValidationMessage For="()=>proData.Name"></ValidationMessage>
                </div>
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Mô Tả 1</label>
                <InputTextArea class="form-control" @bind-Value="proData.Description1" placeholder="Mô tả 1" />
                <div class="text-danger ps-3">
                    <ValidationMessage For="()=>proData.Description1"></ValidationMessage>
                </div>
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Mô Tả 2</label>
                <InputTextArea class="form-control" @bind-Value="proData.Description2" placeholder="Mô tả 2" />
                <div class="text-danger ps-3">
                    <ValidationMessage For="()=>proData.Description2"></ValidationMessage>
                </div>
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Danh Mục</label>
                <InputSelect class="form-control" @bind-Value="proData.CateID">
                    @foreach (Categories item in cate)
                    {
                        <option value="@item.CateID">@item.Name</option>
                    }
                </InputSelect>
                <div class="text-danger ps-3">
                    <ValidationMessage For="()=>proData.CateID"></ValidationMessage>
                </div>
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Trạng Thái</label>
                <InputSelect class="form-control" @bind-Value="proData.StatusID">
                    <option value="0" selected>Hợp lệ</option>
                    <option value="1">Không hợp lệ</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Thêm Sản Phẩm</button>
            <p class="text-success p-2 ms-auto">@FormSubmitMessage</p>
        </EditForm>
    </div>
    <div id="formgetimg" class="col-md-6">
        <h1>Danh Sách Ảnh</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Hình Ảnh</th>
                    <th>Khác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var image in images)
                {
                    <tr>
                        <td>
                            <img src="@GetImagePath(image.Name)" width="100" />
                        </td>

                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => ConfirmDelete(image.ImageID))">
                                Xóa
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        <h1>Thêm Hình Ảnh Sản Phẩm</h1>
        <EditForm Model="uploadModel">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label class="font-weight-bold">Tên Sản Phẩm</label>
                <InputSelect @bind-Value="uploadModel.ProductID" class="form-control">
                    @foreach (Product item in pro)
                    {
                        <option value="@item.ProductID">@item.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label class="font-weight-bold">Chọn Hình Ảnh</label>
                <InputFile OnChange="ChangeHandler" />
            </div>

            <div class="form-group">
                <button @onclick="UploadFile" class="btn btn-primary">Thêm Hình Ảnh</button>
            </div>

            <p>@apiResponse</p>
        </EditForm>
    </div>
</div>

<script>
    function HideProFunction() {
        var x = document.getElementById("formgetpro");
        var y = document.getElementById("formgetimg");
        if (x.style.display === "none") {
            x.style.display = "block";
            y.style.display = "none";
        } else {
            x.style.display = "none";
            y.style.display = "block";
        }
    }
    function confirmDelete(message) {
        return new Promise((resolve) => {
            const result = confirm(message);
            resolve(result);
        });
    }
</script>

@code {
    private bool IsLoggedIn = false;
    private int RoleID = 0;

    //pro
    string urlPro = "http://localhost:20714/api/Products";
    string urlCate = "http://localhost:20714/api/Categories";

    public Product proData = new Product();
    Product ReceivedPro;
    public IEnumerable<Categories> cate { get; set; } = Enumerable.Empty<Categories>();
    public string FormSubmitMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await GetSession();
    }
    

    private async Task GetSession()
    {
        var userInfoJson = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userSession");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            var userInfo = JsonConvert.DeserializeObject<UserLogin>(userInfoJson);
            if (userInfo != null)
            {
                IsLoggedIn = true;
                RoleID = userInfo.RoleID;
            }
        }
    }

    private async Task Load()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlCate);
            string apiResponse = await response.Content.ReadAsStringAsync();
            cate = JsonConvert.DeserializeObject<List<Categories>>(apiResponse);
        }

        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlPro);
            var apiResponse = await response.Content.ReadAsStringAsync();
            pro = JsonConvert.DeserializeObject<List<Product>>(apiResponse);
        }

        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlImg);
            var apiResponse = await response.Content.ReadAsStringAsync();
            images = JsonConvert.DeserializeObject<List<Admin.Model.Image>>(apiResponse);
        }
    }

    public async Task HandleValidSubmit()
    {
        ReceivedPro = new Product();
        using (var httpClient = new HttpClient())
        {
            StringContent content = new StringContent(JsonConvert.SerializeObject(proData), Encoding.UTF8, "application/json");

            using (var response = await httpClient.PostAsync(urlPro, content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    ReceivedPro = JsonConvert.DeserializeObject<Product>(apiResponse);
                    FormSubmitMessage = "Thêm sản phẩm thành công!";
                    await Load();
                }
                else
                {
                    FormSubmitMessage = "Thêm thất bại: " + apiResponse;
                }
            }
        }

        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync(urlCate))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                cate = JsonConvert.DeserializeObject<List<Categories>>(apiResponse);
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dữ liệu không hợp lệ, vui lòng kiểm tra lại.";


    //create img
    string url = "http://localhost:20714/api/Images/UploadFile";

    public IEnumerable<Product> pro { get; set; } = Enumerable.Empty<Product>();

    public string apiResponse { get; set; }
    public IBrowserFile F;
    private Image uploadModel = new Image();

    private void ChangeHandler(InputFileChangeEventArgs e)
    {
        F = e.File;
    }

    public async Task UploadFile()
    {
        if (F != null && uploadModel.ProductID > 0)
        {
            using (var ms = F.OpenReadStream(968435456))
            {
                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(ms), "file", F.Name);
                content.Add(new StringContent(uploadModel.ProductID.ToString()), "ProductID");

                using (var httpClient = new HttpClient())
                {
                    using (var response = await httpClient.PostAsync(url, content))
                    {
                        response.EnsureSuccessStatusCode();
                        apiResponse = await response.Content.ReadAsStringAsync();
                    }
                }
            }
        }
        else
        {
            apiResponse = "Vui lòng chọn tên sản phẩm";
        }
    }

    public class Image
    {
        public int ProductID { get; set; }
        public IBrowserFile File { get; set; }
    }

    //get img
    string urlImg = "http://localhost:20714/api/Images";
    string imageBasePath = "http://localhost:49972/images/";

    public IEnumerable<Admin.Model.Image> images { get; set; } = Enumerable.Empty<Admin.Model.Image>();

    async Task CallAPIGetImg()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlImg);
            var apiResponse = await response.Content.ReadAsStringAsync();
            images = JsonConvert.DeserializeObject<List<Admin.Model.Image>>(apiResponse);
        }
    }
    private async Task ConfirmDelete(int imageId)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmDelete", "Bạn có chắc chắn muốn xóa bảng hiệu này không?");
        if (confirmed)
        {
            await Delete(imageId);
        }
    }

    public async Task Delete(int imageId)
    {
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.DeleteAsync(urlImg + "/" + imageId))
            {
                if (response.IsSuccessStatusCode)
                {
                    await Load();
                }
                else
                {
                    apiResponse = "Xóa thất bại: " + await response.Content.ReadAsStringAsync();
                }
            }
        }
    }

    private string GetImagePath(string imageName) => $"{imageBasePath}{imageName}";
}

