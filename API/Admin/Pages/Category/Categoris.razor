@page "/Category"
@inject IJSRuntime jsRuntime

<p><a href="AddCategories">Thêm danh mục sản phẩm</a></p>

<div class="panel panel-primary">
    <div class="panel-heading"><h2>Thông tin danh mục sản phẩm</h2></div>

    <div>
        <label for="searchInput">Tìm kiếm:</label>
        <input type="text" id="searchInput" @bind="searchQuery" placeholder="Nhập tên danh mục..." />
        <button class="btn-search btn btn-primary" @onclick="OnSearchClicked">Tìm kiếm</button>
    </div>
    <label for="nameSort">Lọc theo tên:</label>
    <select id="nameSort" @onchange="OnNameSortChanged" value="@nameSortOrder">
        <option value="asc">Lọc theo tên từ A - Z</option>
        <option value="desc">Lọc theo tên từ Z - A</option>
    </select>

    <table class="table">
        <thead>
            <tr>
                <th>Tên</th>
                <th>Hình Ảnh</th>
                <th>Trạng Thái</th>
                <th>Khác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PaginatedCategories)
            {
                <tr>
                    <td>@item.Name</td>
                    <td><img src="@GetImagePath(item.Image)" width="100" height="100" /></td>
                    <td>@(item.Status == 0 ? "Hợp lệ" : "Không hợp lệ")</td>
                    <td><a class="btn btn-success" href="EditCategoris/@item.CateID">Sửa</a></td>
                </tr>
            }
        </tbody>
    </table>
</div>
<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item">
            <a class="page-link" @onclick="PreviousPage" disabled="@(!CanGoBack)">
                <span aria-hidden="true"><i class="fa-light fa-hand-point-left"></i></span>
            </a>
        </li>
        <li class="page-item"><span class="page-link text-black">Trang @currentPage trên @totalPages</span></li>
        <li class="page-item">
            <a class="page-link" @onclick="NextPage" disabled="@(!CanGoNext)">
                <span aria-hidden="true"><i class="fa-regular fa-hand-point-right"></i></span>
            </a>
        </li>
    </ul>
</nav>

@code {
    string imageBasePath = "http://localhost:49972/images";
    string urlCategories = "http://localhost:20714/api/Categories";
    public string searchQuery { get; set; } = string.Empty;
    public IEnumerable<Categories> Categories { get; set; } = Enumerable.Empty<Categories>();
    public IEnumerable<Categories> filteredCategories { get; set; } = Enumerable.Empty<Categories>();
    private string nameSortOrder = "asc"; // Lọc mặc định từ A - Z
    private int currentPage = 1;
    private int pageSize = 5;

    protected async override Task OnInitializedAsync()
    {
        await CallAPI();
        ApplyFilters();
    }

    async Task CallAPI()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync(urlCategories);
            var apiResponse = await response.Content.ReadAsStringAsync();
            Categories = JsonConvert.DeserializeObject<List<Categories>>(apiResponse);
            ApplyFilters();
        }
    }

    private void ApplyFilters()
    {
        var filtered = Categories.AsEnumerable();

        // Tìm kiếm theo tên
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filtered = filtered.Where(c => c.Name.ToLower().Contains(searchQuery.ToLower()));
        }

        // Sắp xếp theo tên từ A-Z hoặc Z-A
        if (!string.IsNullOrEmpty(nameSortOrder))
        {
            filtered = nameSortOrder == "asc"
                ? filtered.OrderBy(c => c.Name)
                : filtered.OrderByDescending(c => c.Name);
        }

        filteredCategories = filtered.ToList();
    }

    private List<Categories> PaginatedCategories => filteredCategories
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    private int totalPages => (int)Math.Ceiling((double)filteredCategories.Count() / pageSize);
    private bool CanGoBack => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;

    private void PreviousPage()
    {
        if (CanGoBack)
        {
            currentPage--;
            ApplyFilters();
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            ApplyFilters();
        }
    }

    private void OnSearchClicked()
    {
        currentPage = 1;
        ApplyFilters();
    }

    private void OnNameSortChanged(ChangeEventArgs e)
    {
        nameSortOrder = e.Value.ToString();
        currentPage = 1; // Reset về trang đầu tiên sau khi sắp xếp
        ApplyFilters();
    }

    private string GetImagePath(string imageName) => $"{imageBasePath}/{imageName}";
}
